const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const express = require('express');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (webhook –∏–ª–∏ polling)
const IS_PROD = process.env.NODE_ENV === 'production';

// Bot configuration
const BOT_TOKEN = process.env.BOT_TOKEN || '7914542986:AAEI3dVWnv1utpgMYKyd5v08KGrvjNyviOo';
const SECRET_CODE = process.env.SECRET_CODE || 'nuras2316';

// Data storage paths
const DATA_DIR = path.join(__dirname, 'data');
const USERS_FILE = path.join(DATA_DIR, 'users.json');
const TASKS_FILE = path.join(DATA_DIR, 'tasks.json');

// Create data directory if it doesn't exist
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// Environment variables
const PORT = process.env.PORT || 3000;
const URL = process.env.URL || 'https://afaffa.vercel.app';

// Initialize bot with appropriate mode
let bot;
const app = express();
app.use(express.json());

if (IS_PROD) {
  // Webhook mode for production (Vercel)
  bot = new TelegramBot(BOT_TOKEN, {
    webHook: {
      port: PORT
    }
  });
  
  // Set webhook only in production mode
  bot.setWebHook(`${URL}/bot${BOT_TOKEN}`);
  
  // Webhook endpoint
  app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
  
  console.log(`Starting bot in WEBHOOK mode`);
} else {
  // Polling mode for local development
  bot = new TelegramBot(BOT_TOKEN, { polling: true });
  console.log(`Starting bot in POLLING mode`);
}

// Health check endpoint
app.get('/', (req, res) => {
  res.send('Bot is running!');
});

// Store user data (load from file if exists)
let users = {};
let tasksData = {};

// Load data from file if exists
try {
  if (fs.existsSync(USERS_FILE)) {
    users = JSON.parse(fs.readFileSync(USERS_FILE, 'utf8'));
    console.log('Users data loaded from file');
  }
  
  if (fs.existsSync(TASKS_FILE)) {
    tasksData = JSON.parse(fs.readFileSync(TASKS_FILE, 'utf8'));
    console.log('Tasks data loaded from file');
  }
} catch (error) {
  console.error('Error loading data from files:', error);
}

// Save data to files periodically
const saveInterval = setInterval(() => {
  saveDataToFiles();
}, 5 * 60 * 1000);

// Handle process exit to save data
process.on('SIGINT', () => {
  console.log('Saving data before exit...');
  saveDataToFiles();
  clearInterval(saveInterval);
  process.exit(0);
});

// Save data to files
function saveDataToFiles() {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasksData, null, 2));
    console.log('Data saved to files');
  } catch (error) {
    console.error('Error saving data to files:', error);
  }
}

// Static predefined tasks
const staticTasks = [
  { text: "–ü—Ä—ã–≥–Ω–∏ 10 —Ä–∞–∑", emoji: "üèÉ", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" },
  { text: "–°–¥–µ–ª–∞–π 5 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", emoji: "üèãÔ∏è", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" },
  { text: "–°–ø–æ–π –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é", emoji: "üé§", category: "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ" },
  { text: "–ò–∑–æ–±—Ä–∞–∑–∏ –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ", emoji: "üêµ", category: "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
  { text: "–ù–∞—Ä–∏—Å—É–π —Å–º–µ—à–Ω–æ–π —Ä–∏—Å—É–Ω–æ–∫", emoji: "üé®", category: "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ" },
  { text: "–°–¥–µ–ª–∞–π 3 –æ—Ç–∂–∏–º–∞–Ω–∏—è", emoji: "üí™", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" },
  { text: "–†–∞—Å—Å–º–µ—à–∏ –¥—Ä—É–≥–∞", emoji: "üòÇ", category: "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
  { text: "–†–∞—Å—Å–∫–∞–∂–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", emoji: "üìù", category: "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ" },
  { text: "–°—Ç–∞–Ω—Ü—É–π 30 —Å–µ–∫—É–Ω–¥", emoji: "üíÉ", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" },
  { text: "–°–¥–µ–ª–∞–π 20 –ø—Ä—ã–∂–∫–æ–≤ —Å–æ —Å–∫–∞–∫–∞–ª–∫–æ–π", emoji: "ü§∏", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" }
];

// Predefined image descriptions
const predefinedDescriptions = [
  { text: "–°–¥–µ–ª–∞–π —Ç–∞–∫—É—é –∂–µ –ø–æ–∑—É –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", category: "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ" },
  { text: "–ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ—Ç —Ç—Ä—é–∫", category: "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ" },
  { text: "–°–¥–µ–ª–∞–π —Ç–∞–∫–æ–µ –∂–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞", category: "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
  { text: "–ù–∞—Ä–∏—Å—É–π —Ç–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ", category: "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ" },
  { text: "–û–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ñ–æ—Ç–æ, –≤ –¥–µ—Ç–∞–ª—è—Ö", category: "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ" }
];

// Mini games definitions
const games = [
  {
    name: '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
    play: playGuessNumber,
    description: '–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10'
  },
  {
    name: '–ù–∞–π–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É',
    play: playSafeButton,
    description: '–ù–∞–π–¥–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
  },
  {
    name: '–ù–∞–π–¥–∏ –±–æ–º–±—É',
    play: playFindBomb,
    description: '–ù–∞–π–¥–∏—Ç–µ –±–æ–º–±—É —Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫'
  },
  {
    name: '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞',
    play: playRockPaperScissors,
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞'
  },
  {
    name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞',
    play: playMathProblem,
    description: '–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É'
  }
];

// Initialize user data
function initUser(userId) {
  if (!users[userId]) {
    users[userId] = {
      authorized: false,
      score: 0,
      currentGame: null,
      gamesPlayed: {},
      gamesWon: {},
      awaitingCommand: false
    };
  }
  
  if (!tasksData[userId]) {
    tasksData[userId] = [];
  }
  
  saveDataToFiles();
}

// Start command handler
bot.onText(/\/start/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  users[userId].isWaitingForTaskDescription = false;
  users[userId].tempTask = null;
  users[userId].awaitingCommand = false;
  
  if (users[userId].authorized) {
    bot.sendMessage(userId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /play.');
  } else {
    bot.sendMessage(userId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:');
  }
});

// Play command to start games
bot.onText(/\/play/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) {
    bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }
  
  startRandomGame(userId);
});

// Authorization handler
bot.on('text', (msg) => {
  const userId = msg.from.id;
  const text = msg.text;
  
  if (text.startsWith('/')) return;
  
  initUser(userId);
  
  if (!users[userId].authorized) {
    if (text === SECRET_CODE) {
      users[userId].authorized = true;
      bot.sendMessage(userId, '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! üéÆ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ /play');
      saveDataToFiles();
    } else {
      bot.sendMessage(userId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    }
    return;
  }
  
  // Handle game input
  if (users[userId].currentGame) {
    const gameHandler = users[userId].currentGame.handleInput;
    if (gameHandler) {
      gameHandler(userId, text);
    }
    return;
  }
  
  // Other text messages
  bot.sendMessage(userId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.');
});

// Help command handler
bot.onText(/\/help/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) {
    bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }
  
  const helpText = 
    'üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n' +
    '/play - –Ω–∞—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É\n' +
    '/stats - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n' +
    '/reset - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç\n' +
    '/myfiles - —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n' +
    'üéÆ *–ú–∏–Ω–∏-–∏–≥—Ä—ã:*\n' + 
    games.map((game, index) => `${index+1}. ${game.name} - ${game.description}`).join('\n');
  
  // Create menu with buttons
  const keyboard = {
    reply_markup: {
      keyboard: [
        [{ text: 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ' }, { text: 'üé¨ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ' }],
        [{ text: 'üé≤ –ò–≥—Ä–∞—Ç—å' }, { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }]
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(userId, helpText, { parse_mode: 'Markdown', ...keyboard });
});

// Stats command handler
bot.onText(/\/stats/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) {
    bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }
  
  showStatistics(userId);
});

// Reset command handler
bot.onText(/\/reset/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) {
    bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }
  
  users[userId].score = 0;
  users[userId].gamesPlayed = {};
  users[userId].gamesWon = {};
  saveDataToFiles();
  
  bot.sendMessage(userId, '–í–∞—à —Å—á–µ—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –Ω—É–ª—è.');
});

// My files command handler
bot.onText(/\/myfiles/, (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) {
    bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }
  
  const userTasks = tasksData[userId] || [];
  
  if (userTasks.length === 0) {
    bot.sendMessage(userId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  let message = 'üìÅ *–í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:*\n\n';
  
  userTasks.forEach((task, index) => {
    const type = task.type === 'photo' ? 'üì∑' : 'üé¨';
    message += `${index + 1}. ${type} ${task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
  });
  
  bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
});

// Handle keyboard buttons
bot.on('message', (msg) => {
  if (!msg.text) return;
  
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) return;
  
  switch (msg.text) {
    case 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
      handleAddPhotoRequest(userId);
      break;
    case 'üé¨ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ':
      handleAddVideoRequest(userId);
      break;
    case 'üé≤ –ò–≥—Ä–∞—Ç—å':
      startRandomGame(userId);
      break;
    case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
      showStatistics(userId);
      break;
  }
});

// Handler for "Add Photo" button
function handleAddPhotoRequest(userId) {
  bot.sendMessage(userId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.');
  users[userId].awaitingPhoto = true;
  users[userId].awaitingVideo = false;
}

// Handler for "Add Video" button
function handleAddVideoRequest(userId) {
  bot.sendMessage(userId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.');
  users[userId].awaitingPhoto = false;
  users[userId].awaitingVideo = true;
}

// Photo handler
bot.on('photo', (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) return;
  
  if (users[userId].awaitingPhoto) {
    users[userId].awaitingPhoto = false;
    users[userId].tempTask = {
      type: 'photo',
      fileId: msg.photo[msg.photo.length - 1].file_id
    };
    
    // Select random description from predefined list
    const randomDescription = predefinedDescriptions[Math.floor(Math.random() * predefinedDescriptions.length)];
    users[userId].tempTask.description = `${randomDescription.text} (${randomDescription.category})`;
    
    // Save the task
    tasksData[userId].push(users[userId].tempTask);
    saveDataToFiles();
    
    bot.sendMessage(userId, `‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: "${users[userId].tempTask.description}"`);
    users[userId].tempTask = null;
  }
});

// Video handler
bot.on('video', (msg) => {
  const userId = msg.from.id;
  initUser(userId);
  
  if (!users[userId].authorized) return;
  
  if (users[userId].awaitingVideo) {
    users[userId].awaitingVideo = false;
    users[userId].tempTask = {
      type: 'video',
      fileId: msg.video.file_id
    };
    
    // Select random description from predefined list
    const randomDescription = predefinedDescriptions[Math.floor(Math.random() * predefinedDescriptions.length)];
    users[userId].tempTask.description = `${randomDescription.text} (${randomDescription.category})`;
    
    // Save the task
    tasksData[userId].push(users[userId].tempTask);
    saveDataToFiles();
    
    bot.sendMessage(userId, `‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: "${users[userId].tempTask.description}"`);
    users[userId].tempTask = null;
  }
});

// Display statistics
function showStatistics(userId) {
  const user = users[userId];
  
  let message = 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n';
  message += `üèÜ –û–±—â–∏–π —Å—á–µ—Ç: ${user.score}\n\n`;
  
  message += 'üéÆ *–ò–≥—Ä—ã:*\n';
  let totalGames = 0;
  let totalWins = 0;
  
  games.forEach(game => {
    const played = user.gamesPlayed[game.name] || 0;
    const won = user.gamesWon[game.name] || 0;
    totalGames += played;
    totalWins += won;
    
    if (played > 0) {
      const winRate = played > 0 ? Math.round((won / played) * 100) : 0;
      message += `${game.name}: ${won}/${played} (${winRate}% –ø–æ–±–µ–¥)\n`;
    }
  });
  
  if (totalGames === 0) {
    message += '–í—ã –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.\n';
  } else {
    const totalWinRate = Math.round((totalWins / totalGames) * 100);
    message += `\nüìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${totalWinRate}%\n`;
  }
  
  message += `\nüìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${tasksData[userId] ? tasksData[userId].length : 0}`;
  
  bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
}

// Start a random game
function startRandomGame(userId) {
  const gameIndex = Math.floor(Math.random() * games.length);
  const game = games[gameIndex];
  
  // Increment the played counter for this game
  users[userId].gamesPlayed[game.name] = (users[userId].gamesPlayed[game.name] || 0) + 1;
  saveDataToFiles();
  
  // Start the game
  game.play(userId);
}

// Handle win
function handleWin(userId) {
  const user = users[userId];
  const gameName = user.currentGame ? user.currentGame.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
  
  // Increment score and win counter
  user.score += 1;
  user.gamesWon[gameName] = (user.gamesWon[gameName] || 0) + 1;
  
  // Clear current game
  user.currentGame = null;
  
  // Save updated data
  saveDataToFiles();
  
  // Send win message with updated score
  bot.sendMessage(userId, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\nüèÜ –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${user.score}\n\n–ù–∞–ø–∏—à–∏—Ç–µ /play, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.`);
}

// Handle loss
function handleLoss(userId) {
  const user = users[userId];
  
  // Clear current game
  user.currentGame = null;
  
  // Choose a task
  let task;
  
  // First check if user has custom tasks
  if (tasksData[userId] && tasksData[userId].length > 0) {
    // 50% chance to get custom task, 50% chance to get static task
    if (Math.random() < 0.5) {
      const randomIndex = Math.floor(Math.random() * tasksData[userId].length);
      task = tasksData[userId][randomIndex];
    }
  }
  
  // If no custom task selected, use static task
  if (!task) {
    const randomIndex = Math.floor(Math.random() * staticTasks.length);
    task = staticTasks[randomIndex];
  }
  
  if (task.type === 'photo') {
    // Send photo task
    bot.sendPhoto(userId, task.fileId, {
      caption: `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n${task.description}`,
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'skip_task' }]
        ]
      }
    });
  } else if (task.type === 'video') {
    // Send video task
    bot.sendVideo(userId, task.fileId, {
      caption: `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n${task.description}`,
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'skip_task' }]
        ]
      }
    });
  } else {
    // Send text task
    bot.sendMessage(userId, `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n${task.emoji} ${task.text}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'skip_task' }]
        ]
      }
    });
  }
  
  saveDataToFiles();
}

// Skip task callback
bot.on('callback_query', (query) => {
  const userId = query.from.id;
  
  if (query.data === 'skip_task') {
    bot.answerCallbackQuery(query.id, { text: '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ!' });
    bot.sendMessage(userId, '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ /play, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.');
  }
});

// Game: Guess Number
function playGuessNumber(userId) {
  const correctNumber = Math.floor(Math.random() * 10) + 1;
  
  bot.sendMessage(userId, 'üî¢ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ*\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1', callback_data: 'guess_1' },
          { text: '2', callback_data: 'guess_2' },
          { text: '3', callback_data: 'guess_3' },
          { text: '4', callback_data: 'guess_4' },
          { text: '5', callback_data: 'guess_5' }
        ],
        [
          { text: '6', callback_data: 'guess_6' },
          { text: '7', callback_data: 'guess_7' },
          { text: '8', callback_data: 'guess_8' },
          { text: '9', callback_data: 'guess_9' },
          { text: '10', callback_data: 'guess_10' }
        ]
      ]
    }
  });
  
  users[userId].currentGame = {
    name: '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
    correctNumber: correctNumber
  };
  
  // Set up callback handler
  bot.on('callback_query', (query) => {
    const userId = query.from.id;
    const gameData = users[userId].currentGame;
    
    if (!gameData || gameData.name !== '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ') return;
    
    if (query.data.startsWith('guess_')) {
      const guess = parseInt(query.data.split('_')[1]);
      
      bot.answerCallbackQuery(query.id);
      
      if (guess === gameData.correctNumber) {
        handleWin(userId);
      } else {
        bot.sendMessage(userId, `–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${gameData.correctNumber}`);
        handleLoss(userId);
      }
    }
  });
}

// Game: Safe Button
function playSafeButton(userId) {
  const safeButton = Math.floor(Math.random() * 3) + 1;
  
  bot.sendMessage(userId, 'üí£ *–ù–∞–π–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É*\n\n–û–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–ø–∞—Å–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é!', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1Ô∏è‚É£', callback_data: 'safe_1' },
          { text: '2Ô∏è‚É£', callback_data: 'safe_2' },
          { text: '3Ô∏è‚É£', callback_data: 'safe_3' }
        ]
      ]
    }
  });
  
  users[userId].currentGame = {
    name: '–ù–∞–π–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É',
    safeButton: safeButton
  };
  
  // Set up callback handler
  bot.on('callback_query', (query) => {
    const userId = query.from.id;
    const gameData = users[userId].currentGame;
    
    if (!gameData || gameData.name !== '–ù–∞–π–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É') return;
    
    if (query.data.startsWith('safe_')) {
      const choice = parseInt(query.data.split('_')[1]);
      
      bot.answerCallbackQuery(query.id);
      
      if (choice === gameData.safeButton) {
        handleWin(userId);
      } else {
        bot.sendMessage(userId, `–ë—É–º! üí• –≠—Ç–æ –±—ã–ª–∞ –æ–ø–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞! –ë–µ–∑–æ–ø–∞—Å–Ω–æ–π –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ ${gameData.safeButton}.`);
        handleLoss(userId);
      }
    }
  });
}

// Game: Find Bomb
function playFindBomb(userId) {
  const bombPosition = Math.floor(Math.random() * 9) + 1;
  
  bot.sendMessage(userId, 'üí£ *–ù–∞–π–¥–∏ –±–æ–º–±—É*\n\n–í –æ–¥–Ω–æ–π –∏–∑ —è—á–µ–µ–∫ —Å–ø—Ä—è—Ç–∞–Ω–∞ –±–æ–º–±–∞. –ù–∞–π–¥–∏—Ç–µ –µ–µ!', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '1Ô∏è‚É£', callback_data: 'bomb_1' },
          { text: '2Ô∏è‚É£', callback_data: 'bomb_2' },
          { text: '3Ô∏è‚É£', callback_data: 'bomb_3' }
        ],
        [
          { text: '4Ô∏è‚É£', callback_data: 'bomb_4' },
          { text: '5Ô∏è‚É£', callback_data: 'bomb_5' },
          { text: '6Ô∏è‚É£', callback_data: 'bomb_6' }
        ],
        [
          { text: '7Ô∏è‚É£', callback_data: 'bomb_7' },
          { text: '8Ô∏è‚É£', callback_data: 'bomb_8' },
          { text: '9Ô∏è‚É£', callback_data: 'bomb_9' }
        ]
      ]
    }
  });
  
  users[userId].currentGame = {
    name: '–ù–∞–π–¥–∏ –±–æ–º–±—É',
    bombPosition: bombPosition
  };
  
  // Set up callback handler
  bot.on('callback_query', (query) => {
    const userId = query.from.id;
    const gameData = users[userId].currentGame;
    
    if (!gameData || gameData.name !== '–ù–∞–π–¥–∏ –±–æ–º–±—É') return;
    
    if (query.data.startsWith('bomb_')) {
      const choice = parseInt(query.data.split('_')[1]);
      
      bot.answerCallbackQuery(query.id);
      
      if (choice === gameData.bombPosition) {
        bot.sendMessage(userId, `–ë–æ–º–±–∞ –Ω–∞–π–¥–µ–Ω–∞! üí£ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`);
        handleWin(userId);
      } else {
        bot.sendMessage(userId, `–ú–∏–º–æ! –ë–æ–º–±–∞ –±—ã–ª–∞ –≤ —è—á–µ–π–∫–µ ${gameData.bombPosition}.`);
        handleLoss(userId);
      }
    }
  });
}

// Game: Rock Paper Scissors
function playRockPaperScissors(userId) {
  bot.sendMessage(userId, '‚úÇÔ∏è *–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞*\n\n–°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä!', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üëä –ö–∞–º–µ–Ω—å', callback_data: 'rps_rock' },
          { text: '‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã', callback_data: 'rps_scissors' },
          { text: '‚úã –ë—É–º–∞–≥–∞', callback_data: 'rps_paper' }
        ]
      ]
    }
  });
  
  users[userId].currentGame = {
    name: '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'
  };
  
  // Set up callback handler
  bot.on('callback_query', (query) => {
    const userId = query.from.id;
    const gameData = users[userId].currentGame;
    
    if (!gameData || gameData.name !== '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞') return;
    
    if (query.data.startsWith('rps_')) {
      const playerChoice = query.data.split('_')[1];
      const choices = ['rock', 'paper', 'scissors'];
      const botChoice = choices[Math.floor(Math.random() * 3)];
      
      bot.answerCallbackQuery(query.id);
      
      const playerEmoji = getEmojiForRPS(playerChoice);
      const botEmoji = getEmojiForRPS(botChoice);
      
      const result = determineRPSWinner(playerChoice, botChoice);
      
      bot.sendMessage(userId, `–í—ã: ${playerEmoji}\n–ë–æ—Ç: ${botEmoji}\n\n${result}`);
      
      if (result === '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ') {
        handleWin(userId);
      } else if (result === '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢') {
        handleLoss(userId);
      } else {
        // It's a tie, play again
        bot.sendMessage(userId, '–ù–∏—á—å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        playRockPaperScissors(userId);
      }
    }
  });
}

function determineRPSWinner(playerChoice, botChoice) {
  if (playerChoice === botChoice) {
    return '–ù–∏—á—å—è! ü§ù';
  }
  
  if (
    (playerChoice === 'rock' && botChoice === 'scissors') ||
    (playerChoice === 'paper' && botChoice === 'rock') ||
    (playerChoice === 'scissors' && botChoice === 'paper')
  ) {
    return '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ';
  } else {
    return '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢';
  }
}

function getEmojiForRPS(choice) {
  switch (choice) {
    case 'rock': return 'üëä –ö–∞–º–µ–Ω—å';
    case 'paper': return '‚úã –ë—É–º–∞–≥–∞';
    case 'scissors': return '‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã';
    default: return choice;
  }
}

// Game: Math Problem
function playMathProblem(userId) {
  const operations = ['+', '-', '*'];
  const operation = operations[Math.floor(Math.random() * operations.length)];
  
  let num1, num2, answer;
  
  switch (operation) {
    case '+':
      num1 = Math.floor(Math.random() * 50) + 1;
      num2 = Math.floor(Math.random() * 50) + 1;
      answer = num1 + num2;
      break;
    case '-':
      num1 = Math.floor(Math.random() * 50) + 51; // Ensure larger number
      num2 = Math.floor(Math.random() * 50) + 1;
      answer = num1 - num2;
      break;
    case '*':
      num1 = Math.floor(Math.random() * 10) + 1;
      num2 = Math.floor(Math.random() * 10) + 1;
      answer = num1 * num2;
      break;
  }
  
  // Generate 3 wrong answers
  let answers = [answer];
  while (answers.length < 4) {
    let wrongAnswer = answer + (Math.floor(Math.random() * 10) - 5); // +/- 5
    if (wrongAnswer !== answer && !answers.includes(wrongAnswer) && wrongAnswer > 0) {
      answers.push(wrongAnswer);
    }
  }
  
  // Shuffle answers
  answers = shuffleArray(answers);
  
  // Create inline keyboard with answers
  const keyboard = [];
  for (let i = 0; i < 4; i += 2) {
    keyboard.push([
      { text: answers[i].toString(), callback_data: `math_${answers[i]}` },
      { text: (i+1 < 4) ? answers[i+1].toString() : "", callback_data: (i+1 < 4) ? `math_${answers[i+1]}` : "math_none" }
    ]);
  }
  
  bot.sendMessage(userId, `üßÆ *–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞*\n\n–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: ${num1} ${operation} ${num2} = ?`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
  
  users[userId].currentGame = {
    name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞',
    answer: answer
  };
  
  // Set up callback handler
  bot.on('callback_query', (query) => {
    const userId = query.from.id;
    const gameData = users[userId].currentGame;
    
    if (!gameData || gameData.name !== '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞') return;
    
    if (query.data.startsWith('math_')) {
      const userAnswer = parseInt(query.data.split('_')[1]);
      
      bot.answerCallbackQuery(query.id);
      
      if (userAnswer === gameData.answer) {
        handleWin(userId);
      } else {
        bot.sendMessage(userId, `–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${gameData.answer}`);
        handleLoss(userId);
      }
    }
  });
}

// Helper function to shuffle array
function shuffleArray(array) {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

// Start server if in production mode
if (IS_PROD) {
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log(`Webhook URL: ${URL}/bot${BOT_TOKEN}`);
  });
} 